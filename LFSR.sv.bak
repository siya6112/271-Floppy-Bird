module LFSR(clk, reset, Q);
	input logic clk, reset; 
	output logic [9:0] Q; 
	
	logic XNOR; 
	
	
	assign XNOR = (Q[3] ~^ Q[0]); 
	
	always_ff @(posedge clk) begin
		if(reset) Q <= 10'b0000000000; 
		else Q <= {xnor_out, Q[9: 1]}; 
	end 

endmodule 

module LFSR_testbench();
	logic [9:0] Q;
	logic clk, reset;
	logic xnor_out;
	
	LFSR dut(.clk, .reset, .Q);
	
	parameter CLOCK_PERIOD = 100;
	initial begin
		clk <= 0;
		forever #(CLOCK_PERIOD / 2)
		clk <= ~clk;
	end
	
	initial begin
		reset <= 1; 					repeat(2)	@(posedge clk);
		reset <= 0;						repeat(15)	@(posedge clk);
		$stop;
	end
endmodule