module DE1_SoC_2 (CLOCK_50, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, KEY, LEDR, SW);
	input logic CLOCK_50; // 50MHz clock.
	output logic [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5;
	output logic [9:0] LEDR;
	input logic [3:0] KEY; // True when not pressed, False when pressed
	input logic [9:0] SW;
	
	// Generate clk off of CLOCK_50, whichClock picks rate.
	
	logic reset;
	logic [31:0] div_clk;
	
	assign reset = ~KEY[0];
	parameter whichClock = 25; // 0.75 Hz clock
	clock_divider cdiv (.clock(CLOCK_50),
								.reset(reset),
								.divided_clocks(div_clk));
	
	// Clock selection; allows for easy switching between simulation and board
	// clocks
	logic clkSelect;
	logic [2:0] out;
	// Uncomment ONE of the following two lines depending on intention
	
	assign clkSelect = CLOCK_50; 	// for simulation
//	assign clkSelect = div_clk[whichClock]; // for board
	
	
	lights s (.clk(clkSelect), .reset, .SW(SW), .out);
	
	// Show signals on LEDRs so we can see what is happening
	assign LEDR[2:0] = out;
	// or
//	assign out = LEDR[2:0]; 
	
endmodule